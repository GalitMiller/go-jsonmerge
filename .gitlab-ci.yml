variables:
    GOPROJ_BASE: "github.com/RaveNoX" 
    GOPROJ: "$GOPROJ_BASE/go-jsonmerge"
    GOPATH: "$CI_PROJECT_DIR/.build"    


stages:
- test
- build

before_script:
- export PATH="$GOPATH/bin:$PATH"
- mkdir -p $GOPATH/src/$GOPROJ_BASE
- ln -s $(pwd) $GOPATH/src/$GOPROJ
- cd $GOPATH/src/$GOPROJ/
- go get -u github.com/golang/dep/cmd/dep
- dep ensure
- mkdir -p artifacts

after_script:
- rm -rf $GOPATH/src/$GOPROJ

cache:
    key: "gopath_$CI_BUILD_REF"
    paths:
    - $GOPATH
    - vendor/**

test:
    tags:
    - docker
    - linux
    image: golang:latest
    stage: test        
    script:        
    - go test -cover -v -coverprofile="./artifacts/cover.out" ./
    - go tool cover -html="./artifacts/cover.out" -o "./artifacts/cover.htm"
    - go test -cover -v -coverprofile="./artifacts/cover_cmd.out" ./cmd
    - go tool cover -html="./artifacts/cover_cmd.out" -o "./artifacts/cover_cmd.htm"
    artifacts:
        paths:
        - artifacts/*
    

compile-linux:
    tags:
    - docker
    - linux
    image: golang:latest
    stage: build
    variables:
        GOOS: linux
        GOARCH: amd64
    script:        
    - go build -o artifacts/jsonmerge ./cmd 
    artifacts:
        paths:
        - artifacts/*

compile-windows:
    tags:
    - docker
    - linux
    image: golang:latest
    stage: build
    variables:
        GOOS: windows
        GOARCH: amd64
    script:
    - go build -o artifacts/jsonmerge.exe ./cmd
    artifacts:
        paths:
        - artifacts/*

compile-darwin:
    tags:
    - docker
    - linux
    image: golang:latest
    stage: build
    variables:
        GOOS: darwin
        GOARCH: amd64
    script:        
    - go build -o artifacts/jsonmerge ./cmd 
    artifacts:
        paths:
        - artifacts/*

